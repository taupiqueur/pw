name: Release CI

on: [push, pull_request]

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  release:
    name: Create release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create release
        run: |
          # Create tag: nightly
          git tag --force nightly
          git push --force origin nightly

          # Create release: nightly
          gh release delete nightly --yes || true
          gh release create nightly --title 'Nightly builds' --notes-file CHANGELOG.md --prerelease

  build:
    name: Build release
    needs: release
    strategy:
      fail-fast: false # donâ€™t fail other jobs if one fails
      matrix:
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            archive: pw-nightly-x86_64-unknown-linux-musl.tar.xz

          - target: x86_64-apple-darwin
            os: macos-latest
            archive: pw-nightly-x86_64-apple-darwin.tar.xz

          - target: x86_64-pc-windows-msvc
            os: windows-latest
            archive: pw-nightly-x86_64-pc-windows-msvc.zip

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Crystal
        uses: crystal-lang/install-crystal@v1

      # - name: Install packages (Linux)
        # if: matrix.os == 'ubuntu-latest'
        # run: sudo apt install -y crystal
        # run: sudo snap install crystal --classic

      # - name: Install packages (macOS)
        # if: matrix.os == 'macos-latest'
        # run: brew install crystal

      # - name: Install packages (Windows)
        # if: matrix.os == 'windows-latest'
        # run: choco install crystal

      - name: Build release (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sh scripts/docker-run.sh make static=yes release name=pw version=nightly target=${{ matrix.target }}

      - name: Build release (macOS)
        if: matrix.os == 'macos-latest'
        run: make release name=pw version=nightly target=${{ matrix.target }}

      - name: Build release (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          shards build --release
          7z a releases/${{ matrix.archive }} bin/pw.exe

      - name: Upload release
        run: gh release upload nightly releases/${{ matrix.archive }}
